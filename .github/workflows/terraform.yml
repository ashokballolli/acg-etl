name: 'Terraform'

on:
  push:
    branches:
      - master
  pull_request:

env:
  tf_version: '0.13.4'
  tf_working_dir: './iac-terraform/setup'
  project: 'acg-etl'
  aws_region: 'eu-central-1'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v2
      - name: 'Set up Python ${{ matrix.python-version }}'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 'Test with unittest'
        id: app_test
        run: |
          python -m unittest discover test

  terraform:
    name: 'Terraform'
    needs: build
    runs-on: ubuntu-latest
    env:
      project-home-directory: ./
    strategy:
      matrix:
        python-version: [3.7]
    defaults:
      run:
        shell: bash

    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2

      - name: 'AWS IAM Assume Role'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: GH-Actions-${{ env.project }}


      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false

      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false


      - name: 'Terraform Plan'
        id: plan
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
          args: '-var="rds_username=${{ secrets.RDS_USERNAME }}" -var="rds_password=${{ secrets.RDS_PASSWORD }}"'


      - name: 'Set up Python 3.x'
        uses: actions/setup-python@v2
        with:
          python-version: '3.7.9'

      - name: 'Package Libraries'
        if: steps.plan.outputs.tf_actions_plan_has_changes == 'true'
        run: |
          python --version
          mkdir -p ~/acg-etl-lib/python/lib/python3.7/site-packages
          cd ~/acg-etl-lib/python/lib/python3.7/site-packages
          python3.7 -m pip install -r ~/work/acg-etl/acg-etl/requirements.txt  -t .
          zip -r python.zip .
          mv python.zip ~/work/acg-etl/acg-etl/iac-terraform/setup/files_to_upload/
          ls -la ~/work/acg-etl/acg-etl/iac-terraform/setup/files_to_upload/

      - name: 'Package App'
        run: |
          cd ~/work/acg-etl/acg-etl/
          zip -r acg-etl.zip . -x ".*" "iac-terraform/*"
          mv acg-etl.zip ./iac-terraform/setup/files_to_upload/
          ls -la ./iac-terraform/setup/files_to_upload/

      - name: 'Terraform Apply'
        if: steps.plan.outputs.tf_actions_plan_has_changes == 'true'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false
          args: '-var="rds_username=${{ secrets.RDS_USERNAME }}" -var="rds_password=${{ secrets.RDS_PASSWORD }}"'

#      - name: 'Terraform Destroy'
#        uses: hashicorp/terraform-github-actions@master
#        with:
#          tf_actions_version: ${{ env.tf_version }}
#          tf_actions_subcommand: 'destroy'
#          tf_actions_working_dir: ${{ env.tf_working_dir }}
#          tf_actions_comment: false
#          args: '-var="rds_username=${{ secrets.RDS_USERNAME }}" -var="rds_password=${{ secrets.RDS_PASSWORD }}"'