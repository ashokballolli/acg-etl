name: 'Terraform'

on:
  push:
    branches:
      - master
  pull_request:

env:
  tf_version: '0.13.4'
  tf_working_dir: './iac-terraform/setup'
  project: 'acg-etl'
  aws_region: 'eu-central-1'
  artifacts_bucket: 'mamip-artifacts'

jobs:
#  build:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        python-version: [3.7]
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#      - name: Test with unittest
#        run: |
#          python -m unittest discover test

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      project-home-directory: ./
    strategy:
      matrix:
        python-version: [3.7]
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v2

      - name: AWS IAM Assume Role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-session-name: GH-Actions-${{ env.project }}


      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false

      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          tf_actions_comment: false


      # Generates an execution plan for Terraform
      - name: Terraform Plan
        id: plan
        run: |
          cd iac-terraform/setup
          terraform plan -var='rds_username=${{ secrets.RDS_USERNAME }}' -var='rds_password=${{ secrets.RDS_PASSWORD }}' -var='email_addresses=${{ secrets.EMAIL_ADDRESSES }}'

        # On push to master, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks

      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.7.9'

      - name: Package Libraries
        #if: steps.plan.outputs.tf_actions_plan_has_changes == 'true'
        run: |
          python --version
          mkdir -p ~/acg-etl-lib/python/lib/python3.7/site-packages
          cd ~/acg-etl-lib/python/lib/python3.7/site-packages
          python3.7 -m pip install -r ~/work/acg-etl/acg-etl/requirements.txt  -t .
          zip -r python.zip .
          mkdir -p ~/files_to_upload
          mv python.zip ~/files_to_upload
          ls -la ~/files_to_upload

      - name: Terraform Apply
        #if: steps.plan.outputs.tf_actions_plan_has_changes == 'true'
        run: |
          cd iac-terraform/setup
          # terraform destroy -var='rds_username=${{ secrets.RDS_USERNAME }}' -var='rds_password=${{ secrets.RDS_PASSWORD }}' -var='email_addresses=${{ secrets.EMAIL_ADDRESSES }}' -auto-approve
          terraform apply -var='rds_username=${{ secrets.RDS_USERNAME }}' -var='rds_password=${{ secrets.RDS_PASSWORD }}' -var='email_addresses=${{ secrets.EMAIL_ADDRESSES }}' -auto-approve


